// Code generated by MockGen. DO NOT EDIT.
// Source: internal/acnodal/egw.go

// Package acnodal is a generated GoMock package.
package acnodal

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
)

// MockEGW is a mock of EGW interface
type MockEGW struct {
	ctrl     *gomock.Controller
	recorder *MockEGWMockRecorder
}

// MockEGWMockRecorder is the mock recorder for MockEGW
type MockEGWMockRecorder struct {
	mock *MockEGW
}

// NewMockEGW creates a new mock instance
func NewMockEGW(ctrl *gomock.Controller) *MockEGW {
	mock := &MockEGW{ctrl: ctrl}
	mock.recorder = &MockEGWMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEGW) EXPECT() *MockEGWMockRecorder {
	return m.recorder
}

// GetGroup mocks base method
func (m *MockEGW) GetGroup() (EGWGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup")
	ret0, _ := ret[0].(EGWGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup
func (mr *MockEGWMockRecorder) GetGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockEGW)(nil).GetGroup))
}

// AnnounceService mocks base method
func (m *MockEGW) AnnounceService(url, name string, ports []v1.ServicePort) (EGWServiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnnounceService", url, name, ports)
	ret0, _ := ret[0].(EGWServiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnnounceService indicates an expected call of AnnounceService
func (mr *MockEGWMockRecorder) AnnounceService(url, name, ports interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnnounceService", reflect.TypeOf((*MockEGW)(nil).AnnounceService), url, name, ports)
}

// AnnounceEndpoint mocks base method
func (m *MockEGW) AnnounceEndpoint(url, address string, port int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnnounceEndpoint", url, address, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnnounceEndpoint indicates an expected call of AnnounceEndpoint
func (mr *MockEGWMockRecorder) AnnounceEndpoint(url, address, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnnounceEndpoint", reflect.TypeOf((*MockEGW)(nil).AnnounceEndpoint), url, address, port)
}
